// Decompiled with JetBrains decompiler
// Type: Weakly.WeakEventSourceBase`1
// Assembly: Weakly, Version=2.1.0.0, Culture=neutral, PublicKeyToken=3e9c206b2200b970
// MVID: 59987104-5B29-48EC-89B5-2E7347C0D910
// Assembly location: C:\Users\Admin\Desktop\RE\Izi.Travel\Weakly.dll
// XML documentation location: C:\Users\Admin\Desktop\RE\Izi.Travel\Weakly.xml

using System;
using System.Collections.Generic;
using System.Reflection;

#nullable disable
namespace Weakly
{
  /// <summary>
  /// A weak event source that does not hold any strong reference to the event listeners.
  /// </summary>
  /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
  public abstract class WeakEventSourceBase<TEventArgs>
  {
    private readonly List<WeakAction<object, TEventArgs>> _eventHandlerEntries = new List<WeakAction<object, TEventArgs>>();
    private readonly WeakReference _gcSentinel = new WeakReference(new object());

    private bool IsCleanupNeeded()
    {
      if (this._gcSentinel.Target != null)
        return false;
      this._gcSentinel.Target = new object();
      return true;
    }

    private void CleanAbandonedItems()
    {
      for (int index = this._eventHandlerEntries.Count - 1; index >= 0; --index)
      {
        if (!this._eventHandlerEntries[index].IsAlive)
          this._eventHandlerEntries.RemoveAt(index);
      }
    }

    private void CleanIfNeeded()
    {
      if (!this.IsCleanupNeeded())
        return;
      this.CleanAbandonedItems();
    }

    /// <summary>Adds the specified event handler.</summary>
    /// <param name="eventHandler">The event handler.</param>
    protected void Add(Delegate eventHandler)
    {
      if ((object) eventHandler == null)
        return;
      if (eventHandler.Target == null)
        throw new ArgumentException("Cannot create weak event to static method.");
      if (eventHandler.GetMethodInfo().IsClosure())
        throw new ArgumentException("Cannot create weak event to anonymous method with closure.");
      lock (this._eventHandlerEntries)
      {
        this.CleanIfNeeded();
        this._eventHandlerEntries.Add(new WeakAction<object, TEventArgs>(eventHandler.Target, eventHandler.GetMethodInfo()));
      }
    }

    /// <summary>Removes the specified event handler.</summary>
    /// <param name="eventHandler">The event handler.</param>
    protected void Remove(Delegate eventHandler)
    {
      if ((object) eventHandler == null)
        return;
      lock (this._eventHandlerEntries)
      {
        this.CleanIfNeeded();
        for (int index = this._eventHandlerEntries.Count - 1; index >= 0; --index)
        {
          WeakAction<object, TEventArgs> eventHandlerEntry = this._eventHandlerEntries[index];
          if (eventHandlerEntry.Target == eventHandler.Target && eventHandlerEntry.Method == eventHandler.GetMethodInfo())
          {
            this._eventHandlerEntries.RemoveAt(index);
            break;
          }
        }
      }
    }

    /// <summary>Raises the event.</summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    public void Raise(object sender, TEventArgs e)
    {
      WeakAction<object, TEventArgs>[] array;
      lock (this._eventHandlerEntries)
      {
        this.CleanIfNeeded();
        array = this._eventHandlerEntries.ToArray();
      }
      this.OnRaise(sender, e);
      foreach (WeakAction<object, TEventArgs> weakAction in array)
        weakAction.Invoke(sender, e);
    }

    /// <summary>Called when the event is raised.</summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object that contains the event data.</param>
    protected abstract void OnRaise(object sender, TEventArgs e);
  }
}
